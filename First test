# for i  in range(1,21):
#     if i  % 3 ==0 or i  % 5==0:
#         continue 
   
#     print(i)

# # ************ Example 1 ************
# # Recap on slicing strings
# print("Example 1: ")

# string = 'Hello world!'
# fizz = string[0:5]
# print(fizz)

# # Note that slicing a string does not modify the original string.
# # You can simply store the substring 'sliced' from the original string in a separate variable.
# # By storing the substring in another variable, you keep the original string intact.


# # ************ Example 2 ************
# print("Example 2: ")

# fact1 = "The original name of Windows was Interface Manager."
# fact1 = fact1.upper()
# print(fact1)
# fact1 = fact1.lower()
# print(fact1)

# # ************ Example 3 ************
# print("Example 3: ")

# sentence = "ThisHELLOisHELLOrandomHELLOtextHELLOweHELLOareHELLOgoingHELLOtoHELLOsplitHELLOapart"
# split_sentence = sentence.split("HELLO")
# print(split_sentence)

# # Notice how a list is printed out?

# # ************ Example 4 ************
# print("Example 4: ")

# fact2 = "          The$first$electronic$computer$ENIAC$weighed$more$than$27$tons.          "
# fact2 = fact2.replace("$", "WOW!")
# print(fact2)
# fact2 = fact2.strip()
# print(fact2)
# fact2 = fact2.split("WOW!")
# print(fact2)

# # ************ Example 5 ************
# print("Example 5: ")
# string_list = ["I", "like", "to", "join", "lists", "to", "make", "strings"]
# list_joined = " ".join(string_list)
# print(list_joined)

# # ========= Escape Character ===========
# # Python uses the backslash (\) as an escape character.
# # The backslash (\) is used as a marker character to tell the compiler/interpreter that the next character has some special meaning.
# # The backslash together with certain other characters are known as escape sequences.

# # ************ Example 6 ************
# print("Example 6: ")
# people = "Person 1 \nPerson 2"
# print(people)
# # Notice the line break between the two words. The \n character is invisible -- it's a command to insert a new line.


# # ************ Example 7 ************
# print("Example 7: ")
# wage = "Person 1: \t 123.22"
# print(wage)
# # Notice the tab between the two words. The \t character is invisible -- it's a command to insert a new tab space.

# # ************ Example 8 ************
# print("Example 8: ")
# sentence = "\"The escape character (\\) is a character which invokes an alternative interpretation of subsequent characters in a character sequence.\""
# print(sentence)
# # Notice that the quotation marks and backslash are printed out as part of the string.

# #===========Data between functions example===========
# def fix_capitalization(name: str) -> str:
#   return(name.title().strip())
# def make_message(name: str):
#   return("Hello " + name + ", how are you?")

# name = input("What is your name?")
# print(fix_capitalization(make_message(name)))

# #==========Displaying a list of items with their count infront using enumerate==========
# list_of_items = ["Apple", "Pear", "Chair", "Banana", "Melon"]
# print (list_of_items)

# list_of_items.remove("Chair")
# print(list_of_items)

# for counter, items in enumerate(list_of_items, 1):
#     print(f"Item {counter}: \t {items}")

# #===============Truthiness==================
# # Type            Falsy           Truthy          
# # Boolean         False           True
# # Integer         0               Non-zero number (for example, 5, -3)
# # Float           0.0             Non-zero number (for example, -3.0, 2.4)
# # String          “”              Non-empty string (for example, “Hello”)
# # None            None
# #Above, we can see what is considered as true an false for each intger.
# #This is helpful to use when creating an if statement, e.g.:
# name = input("What is your name?")

# # `name` is a string variable
# if name:
#     # This path if `name` is NOT the empty string
#     print("Your name is", name)
# else:
#     # This path if `name` is empty string
#     print("No name given.")
# #We can see here how we used the boolean truthiness to produce an error message if name is false (which would be an empty string!)

# #======Using bool to test truthiness=======
# print("The integer 5 is", bool(5))
# print("The integer 0 is", bool(0))
# print("The string 'Cat' is", bool('Cat'))
# print("The string '' (the empty string) is", bool(''))

# # This is False because True is not equal to 5
# print(True == 5)

# # This is True because 5 is Truthy
# print(True == bool(5))

# if a_string != "":
#     ...
# # Simplifies to
# if a_string:
#     ...
# #-----------------------
# if a_number != 0:
#     ...
# # Simplifies to
# if a_number:
#     ...

# #===========Range example=======
# for i in range(5):
#     print(i + 1)
# #Is the same as:
# for i in range(1,6):
#     print(i)